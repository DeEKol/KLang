name: Android CI (RN 0.81)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      NODE_VERSION: '20'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install JS dependencies
        run: npm ci

      - name: Set up Java 11 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Ensure Android SDK & tools (platform 36 + build-tools 36.0.0)
        run: |
          set -euo pipefail

          # Устанавливаем Android SDK в домашнюю директорию runner
          export ANDROID_SDK_ROOT="${HOME}/Android/Sdk"
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          mkdir -p "${ANDROID_SDK_ROOT}/platforms" "${ANDROID_SDK_ROOT}/build-tools" "${ANDROID_SDK_ROOT}/platform-tools"

          echo "Android SDK root: ${ANDROID_SDK_ROOT}"
          echo "Looking up latest commandline tools URL from Google's repository manifest..."

          # Получаем manifest с сервера Google и находим последнюю версию для Linux
          MANIFEST_URL="https://dl.google.com/android/repository/repository2-1.xml"
          tmp_manifest="/tmp/repo-manifest.xml"
          curl -fsSL "${MANIFEST_URL}" -o "${tmp_manifest}"

          # Ищем строки, содержащие commandlinetools-linux-XXXX_latest.zip и выбираем последнюю
          cmdline_zip_filename=$(grep -oP 'commandlinetools-linux-[0-9]+_latest.zip' "${tmp_manifest}" | tail -n1)
          if [ -z "${cmdline_zip_filename}" ]; then
            echo "ERROR: cannot find commandlinetools-linux entry in manifest (${MANIFEST_URL})"
            exit 2
          fi
          echo "Found commandline tools file: ${cmdline_zip_filename}"

          # Составляем URL и скачиваем
          CMDLINE_URL="https://dl.google.com/android/repository/${cmdline_zip_filename}"
          echo "Downloading ${CMDLINE_URL} ..."
          curl -fsSL "${CMDLINE_URL}" -o /tmp/"${cmdline_zip_filename}"

          # Распаковываем в нужную структуру: cmdline-tools/latest
          rm -rf /tmp/cmdline
          mkdir -p /tmp/cmdline
          unzip -q /tmp/"${cmdline_zip_filename}" -d /tmp/cmdline
          rm -f /tmp/"${cmdline_zip_filename}"

          sdkmanager_path=$(find /tmp/cmdline -type f -iname sdkmanager -print -quit || true)
          if [ -z "$sdkmanager_path" ]; then
            echo "ERROR: sdkmanager not found inside the unpacked zip (ls /tmp/cmdline):"
            ls -la /tmp/cmdline || true
            exit 3
          fi
          echo "Found sdkmanager at: $sdkmanager_path"

          cmdline_root_dir=$(dirname "$(dirname "$sdkmanager_path")")
          echo "cmdline root dir: $cmdline_root_dir"

          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
          if command -v rsync >/dev/null 2>&1; then
            rsync -a "${cmdline_root_dir}/" "${ANDROID_SDK_ROOT}/cmdline-tools/latest/"
          else
            cp -a "${cmdline_root_dir}/." "${ANDROID_SDK_ROOT}/cmdline-tools/latest/"
          fi

          rm -rf /tmp/cmdline || true

          # Add sdkmanager to PATH for this step
          export PATH="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          echo "Using sdkmanager from: $(command -v sdkmanager || echo 'not found')"
          echo "PATH=${PATH}"

          # Принимаем лицензии и ставим platform-tools, platforms;android-36, build-tools;36.0.0 и emulator
          yes | sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --licenses || true
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-36" "build-tools;36.0.0" "emulator" "cmdline-tools;latest"

          # Показываем список для отладки
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --list || true

        shell: bash

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Clean Android build
        run: |
          cd android
          ./gradlew clean
          cd ..

      - name: Assemble Debug APK (RN 0.81 safe defaults)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT || format('{0}', env.ANDROID_SDK_ROOT) }}
        run: |
          set -e
          cd android
          # -PdisableFlipper=true is recommended for CI to avoid extra debug deps
          ./gradlew assembleDebug -PdisableFlipper=true --no-daemon --stacktrace
          cd ..

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
